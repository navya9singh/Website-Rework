{% include 'header.njk' %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../style/style.css">
</head>
<body>
    <link rel="stylesheet" href="../style/download.css">
    <main>
    <div class="raised main-content-block">
        <h1>Download TypeScript </h1>
        <p>TypeScript can be installed through three installation routes depending on how you intend to use it: an npm module, a NuGet package or a Visual Studio Extension.</p>
        <p>If you are using Node.js, you want the npm version. If you are using MSBuild in your project, you want the NuGet package or Visual Studio extension.</p>
    </div>
    <div class="raised main-content-block">
        <h2>TypeScript in your project new</h2>
        <p>Having TypeScript set up on a per-project basis lets you have many projects with many different versions of TypeScript, this keeps each project working consistently.</p>
        <section>
            <div style="border-right: 1px solid lightgrey;">
                <h3>via npm</h3>
                <p>TypeScript is available as a <a href="https://www.npmjs.com/package/typescript">package on npm registry</a> available as <code>typescript</code>.</p>
                <p>You will need a copy of <a title="Link to the node.js project" href="https://nodejs.org/en/">Node.js</a> as an environment to run the package. Then you use a dependency manager like
                <a title="Link to the npm package manager" href="https://www.npmjs.com/">npm</a>,
                <a title="Link to the yarn package manager" href="https://yarnpkg.com">yarn</a> or
                <a title="Link to the pnpm package manager" href="https://pnpm.js.org/">pnpm</a> to download TypeScript into your project.</p>
                <code id="code-example">npm install typescript --save-dev</code>
                <br>
                <br>
                <button id="npmButton">npm</button>
                <button id="yarnButton">yarn</button>
                <button id="pnpmButton">pnpm</button>
                <p>All of these dependency managers support lockfiles, ensuring that everyone on your team is using the same version of the language. You can then run the TypeScript compiler using one of the following commands:</p>
                <code id="code-run">npx tsc</code>
                <br>
                <br>
                <button id="npm">npm</button>
                <button id="yarn">yarn</button>
                <button id="pnpm">pnpm</button>
            </div>
                <script>
                    document.getElementById('npmButton').addEventListener('click', function() {
                        document.getElementById('code-example').textContent = 'npm install typescript --save-dev';
                    });
                    document.getElementById('yarnButton').addEventListener('click', function() {
                        document.getElementById('code-example').textContent = 'yarn add typescript --dev';
                    });
                    document.getElementById('pnpmButton').addEventListener('click', function() {
                        document.getElementById('code-example').textContent = 'pnpm add typescript -D';
                    });
                </script>
                <script>
                    document.getElementById('npm').addEventListener('click', function() {
                        document.getElementById('code-run').textContent = 'npx tsc';
                    });
                    document.getElementById('yarn').addEventListener('click', function() {
                        document.getElementById('code-run').textContent = 'yarn tsc';
                    });
                    document.getElementById('pnpm').addEventListener('click', function() {
                        document.getElementById('code-run').textContent = 'pnpm tsc';
                    });
                </script>                             
            <div>
                <h3>via Visual Studio</h3>
                <p>For most project types, you can get TypeScript as a package in Nuget for your MSBuild projects, for example an ASP.NET Core app.</p>
                <p>When using Nuget, you can <a href="https://learn.microsoft.com/visualstudio/javascript/tutorial-aspnet-with-typescript">install TypeScript through Visual Studio</a>using:</p>
                <ul>
                    <li>
                        The Manage NuGet Packages window (which you can get to by right-clicking on a project node)
                    </li>
                    <li>
                        The Nuget Package Manager Console (found in Tools > NuGet Package Manager > Package Manager Console) and then running:
                        <br>
                        <code>Install-Package Microsoft.TypeScript.MSBuild</code>
                    </li>
                </ul>
                <p>For project types which don't support Nuget, you can use the <a href="https://marketplace.visualstudio.com/items?itemName=TypeScriptTeam.typescript-55beta"> TypeScript Visual Studio extension</a>.
                You can <a href="https://learn.microsoft.com/visualstudio/ide/finding-and-using-visual-studio-extensions">install the extension</a>using <code>Extensions &gt; Manage Extensions</code> in Visual Studio.</p>
            </div>
        </section>
    </div>
    <div class="main-content-block" style="text-align: center;">
        <p>The examples below are for more advanced use cases.</p>
    </div>
    <div class="raised main-content-block">
        <h2>Globally Installing TypeScript</h2>
        <p>It can be handy to have TypeScript available across all projects, often to test one-off ideas. Long-term, codebases should prefer a project-wide installation over a global install so that they can benefit from reproducible builds across different machines.</p>
        <section>
            <div style="border-right: 1px solid lightgrey;">
                <h3>via npm</h3>
                <p>You can use npm to install TypeScript globally, this means that you can use the </p><code>tsc</code> command anywhere in your terminal.</p>
                <p>To do this, run <code>npm install -g typescript</code>. This will install the latest version (currently 5.5).</p>
            </div>
            <div>
                <h3>via Visual Studio marketplace</h3>
                <p>You can install TypeScript as a Visual Studio extension, which will allow you to use TypeScript across many MSBuild projects in Visual Studio.</p>
                <p>The latest version is available <a href="https://marketplace.visualstudio.com/items?itemName=TypeScriptTeam.typescript-55beta" title="Link to the Visual Studio Marketplace for the TypeScript MSBuild extension"> in the Visual Studio marketplace</a>.</p>
            </div>
        </section>
    </div>
    <div class="raised main-content-block">
        <h2>Working with TypeScript-compatible transpilers</h2>
        <p>There are other tools which convert TypeScript files to JavaScript files. You might use these tools for speed or consistency with your existing build tooling.</p>
        <p>Each of these projects handle the file conversion, but do not handle the type-checking aspects of the TypeScript compiler. So it's likely that you will still need to keep the above TypeScript dependency around, and you will want to enable <a href="/tsconfig/#isolatedModules">
        <code>isolatedModules</code></a>.</p>
        <section>
            <div style="border-right: 1px solid lightgrey;">
                <h3>Babel</h3>
                <p><a href="https://babeljs.io/">Babel</a> is a very popular JavaScript transpiler which supports TypeScript files via the plugin <a href="https://babeljs.io/docs/en/babel-preset-typescript#docsNav">@babel/plugin-transform-typescript</a>.</p>
            </div>
            <div style="border-right: 1px solid lightgrey;">
                <h3>swc</h3>
                <p><a href="https://swc-project.github.io/docs/installation/">swc</a> is a fast transpiler created in Rust which supports many of Babel's features including TypeScript.</p>
            </div>
            <div>
                <h3>Sucrase</h3>
                <p><a href="https://github.com/alangpierce/sucrase#sucrase/">Sucrase</a> is a Babel fork focused on speed for using in development mode. Sucrase supports TypeScript natively.</p>
            </div>
        </section>
    </div>
    </main>
</body>
</html>
{% include 'footer.njk' %}