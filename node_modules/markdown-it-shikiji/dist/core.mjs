import { transformerMetaHighlight } from 'shikiji-transformers';

function setupMarkdownIt(markdownit, highlighter, options) {
  const {
    highlightLines = false,
    parseMetaString
  } = options;
  markdownit.options.highlight = (code, lang = "text", attrs) => {
    const meta = parseMetaString?.(attrs, code, lang) || {};
    const codeOptions = {
      ...options,
      lang,
      meta: {
        ...options.meta,
        ...meta,
        __raw: attrs
      }
    };
    const builtInTransformer = [];
    if (highlightLines) {
      builtInTransformer.push(
        transformerMetaHighlight({
          className: highlightLines === true ? "highlighted" : highlightLines
        })
      );
    }
    builtInTransformer.push({
      name: "markdown-it-shikiji:block-class",
      code(node) {
        node.properties.class = `language-${lang}`;
      }
    });
    return highlighter.codeToHtml(
      code,
      {
        ...codeOptions,
        transformers: [
          ...builtInTransformer,
          ...codeOptions.transformers || []
        ]
      }
    );
  };
}
function fromHighlighter(highlighter, options) {
  return function(markdownit) {
    setupMarkdownIt(markdownit, highlighter, options);
  };
}

export { fromHighlighter, setupMarkdownIt };
